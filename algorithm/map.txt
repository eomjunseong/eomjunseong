#map
레드 블랙 트리로 구성
레드 블랙 트리는, 자가 균형 이진 탐색 트리로써 삽입과 삭제가 일어나는 경우에 
자동으로 그 높이를 작게 유지하는 이진 탐색 트리.
따라서 트리에 n개의 원소가 있을 때 O(log n)의 시간 복잡도로 삽입, 삭제, 검색을 할 수 있다.
* (문자열의 경우는 예외)

map<key, value>

begin()
end()

clear()
insert( make_pair(key,value) ); //원소추가
find(key)  //key(키값)에 해당하는 iterator를 반환
size()
erase(key) // 해당 원소 지움 
count(key)

(*m.find("a")).second //OK //map 의 find 는 주소를 반환함
m.find("a")->second //OK

m.erase("e");
m.erase(m.find("f")); // also possible
	
map<int, int> ma;
ma.insert(make_pair(1, 3));  // key 값 : 1 , value : 3
ma.insert(make_pair(3, 13)); // key 값 : 3,  value : 13
ma[5] = 10;                  // key 값 : 5,  value : 10
ma[4]++;                     // key 값 : 4,  value : 1  없음으로, 생성하고 (0)-->1증가 

// key : 3인 원소를 지움
ma.erase(3);

// 
cout<< ma[5]<<endl; --> value 값 출력 

for(auto it = m.begin(); it != m.end(); it++){
    cout << "key: " << it->first << " " << "value: " << it->second << '\n';
}
