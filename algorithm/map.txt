#map
레드 블랙 트리로 구성
레드 블랙 트리는, 자가 균형 이진 탐색 트리로써 삽입과 삭제가 일어나는 경우에 
자동으로 그 높이를 작게 유지하는 이진 탐색 트리.
따라서 트리에 n개의 원소가 있을 때 O(log n)의 시간 복잡도로 삽입, 삭제, 검색을 할 수 있다.
* (문자열의 경우는 예외)

map<int, int, greater<int>> m1; 가능 
map<key, value>
map<int> m2(m1); //복사 생성
begin()
end()
size()
erase(key) // 해당 원소 지움 
count(key)
clear()


//원소추가
insert( make_pair(key,value) ); OK
insert(pair<int, int>(10, 20)); OK
int( {    ,   }  ); OK


## find는 주소를 반환함 앵간하면 그냥 쓰지말자 있는거 확실할때만 
주소를 파라미터로 쓰는 곳에서만 쓰자

find(key)  //key(키값)에 해당하는 iterator를 반환
(*m.find("a")).second //OK //map 의 find 는 주소를 반환함
m.find("a")->second //OK


####지우기전에 있나 확인하고 지우기
if(m.count("a")==1){
    m.erase("a");
    m.erase(m.find("f")); // also possible--> 근데 없는거 지우면 렉처먹음
}
m.erase("e"); // 없는거 지우면 없는대로 지우고 넘어가긴함. 
	
map<int, int> ma;
ma.insert(make_pair(1, 3));  // key 값 : 1 , value : 3
ma.insert(make_pair(3, 13)); // key 값 : 3,  value : 13
ma[5] = 10;                  // key 값 : 5,  value : 10
ma[4]++;                     // key 값 : 4,  value : 1  없음으로, 생성하고 (0)-->1증가 

// key : 3인 원소를 지움
ma.erase(3);

// 
cout<< ma[5]<<endl; --> value 값 출력 

for(auto it = m.begin(); it != m.end(); it++){
    cout << "key: " << it->first << " " << "value: " << it->second << '\n';
}

for(auto tmp : m1){
    cout<<   tmp.first<<"   "<<tmp.second<<endl; OK 
}




EXCEPT:

없는값 333
cout<<m1[333]; --> 출력 0 생각하긔 
--> 이것도 KEY 가 0인경우임 ..string이면 렉처먹을수도 . 아무것도 안뜨긴함


============ 써먹은거 ㅇㅇ 
int cc=1; 
map< int , pair<int,int> > m;
m[cc++]= make_pair(i,j);

////////////////////////////////////////////////////////
자동으로 키값 정렬되고 

구체적 정렬 원할때,

bool cmp(pair<string,int> &a,pari<string,int>&b){
    return a.second>b.second;
}

map<string,int> m;
vector<pari<string,int>> vec(m.begin(),m.end());
sort(vec.end(),vec.end(),cmp);

이런식...
//////////////////////////////////////////////////////////

map<string, vector<int>> m;

m["ASD1"].push_back(1);
m["ASD1"].push_back(2);
m["ASD2"].push_back(3);
m["ASD2"].push_back(1);
m["ASD3"].push_back(2);
m["ASD3"].push_back(3);
------>vector<int> vec = m[str]; 가능 ㅇㅇ 
for(auto itr = m.begin(); itr!=m.end();itr++){
    sort(itr->second.begin(),itr->second.end());
    sort((*itr).second.begin(),(*itr).second.end());
}

====================================================
map<string,int> m;
vector<pair<string,int>> vec(m.begin(),m.end()); 
// pair로 key value 분리해서 받아서 정렬가능


====================================================
map<string,string> m;
m["asd"]="www" OK 
cout<<m["asd"] ; OK

map<string,CAR> m;
m["asd"]=CAR(); X
cout<<m["asd"] ;X 

m.insert(make_pair("asd",CAR())); OK 
cout<<m.find("asd")->second.name ; OK ...