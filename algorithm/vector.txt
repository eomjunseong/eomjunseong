vector 컨테이너 (using namespace std)

- 자동으로 메모리가 할당되는 배열
- 맨 뒤쪽에서 삽입과 삭제가 가능
- 중간에 값을 삽입 하거나 삭제할 수도 있음 
- 배열기반이라, 삽입 삭제가 빈번하게 일어난다면 비효율적
- check=vector<int>(n); //ok
- check.assign(n,0); //OK (크기, 숫자) 필수


vector<int> v //빈벡터
vector<int> v(5) //0으로 초기화된 5개원소
vector<int> v(5,2)// 2로 초기화된 5개원소
vector<int> v2(v1)//v1을 복사 생성 

int a[3] ={1,2,3};
	
    cout<< sizeof(a)<<endl;    //12
	cout<< sizeof(a[0])<<endl; //4

vector<int> v(a,a+sizeof(a)/sizeof(a[0])); //ok == ({1,2,3})
vector<string> info({"java","210","150","cpp"});

vector<vector<string>> vec(4,vector<string>(6,"-"));
for(vector<string> v : vec){
    for(string a : v){
        cout<<a<<" ";
    }
    cout<<endl;
}
- - - - - -
- - - - - -
- - - - - -
- - - - - -


int test_arr[] = { 2, 4, 3, 6, 1, 7 };
//OK : vector<int> test_vec ( { 2, 4, 3, 6, 1, 7 });
//NO : vector<int> test_vec (test_arr);

v.size();
v.empty(); -->true false;

v.front(); // 첫번째 반환
v.back(); //마지막 반환
v.begin(); //첫번쨰 가리킴
v.end(); // 마지막 "다음" 가리킴 
v.clear(); //원소제거 capcity 유지 

v.push_back(7);
v.pop_back(); //마지막 원소 제거 

vec.insert(vec.begin()+1, 3); // 2번쨰위치에 3삽입 
v.insert(vec.begin()+1, 3, 4); // 2번쨰 위치에 3개의 4를 삽입 

//vector 와 다름!! 
vector : 주소 줘야함
string.substr(5,3) : 인덱스 넘버 --> 인덱스 5 부터 3개 추출해서 반환
//주소를 처 넣어야함 인덱스 번호가 아니라   
v.erase(vec.begin()+2); //3번쨰 한개 삭제; 뒤로 다 날리는거 아님 --> string 뒤로 다 날림
==v.erase(vec.begin()+2,vec.begin()+3);
vec.erase(vec.begin()+1,vec.begin()+3); // [) 1,2번쨰 삭제; 
vec.erase(vec.begin()+1, 3); // XXXXXXXXXXXXXXXXXX


//정렬후 사용 --> 중복 제거 
unique(v.begin(), v.end());
v.erase(  unique(v.begin(),v.end())  ,  v.end()  );


//vector<string > --> sort 정렬시 --> 길이 X 사전순
//sort(vec.begin(),vec.end(),greater<string>());가능

vector<int> map[10][10] --> map[i][j]v.push_back() //OK

vector<pair<int,int>> vec --> sort(vec.begin(),vec.end())//OK first 오름 차순 