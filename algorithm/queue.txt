#include <queue> 인덱스 접근 X 
--> sort(q.begin(),q.end()) XXXX --> 에초에 begin(),end() 존재 XXXXXX


*BFS에 사용
//queue<int> q2({ 1, 2, 3, 4, 5 }); OK
queue<int> q; 
queue<pair<int,int>> que;
que.push(make_pair(*,*));
que.front().second;// not -> !!

q.push(1);
q.push(2);  
q.push(3); 

q.size();      // queue의 크기 출력
q.empty();     // queue가 비어있는지 check (비어있다면 true)

XXXXXXXXXXXXq.top();XXXXXXXXXXX --> priority_queue 일때 쓰는거임

q.front();     // queue의 가장 첫번째 원소 출력
q.back();      // queue의 가장 마지막 원소 출력

q.pop(); //값 제거 

*복사됨
queue<int> copy = q;
so, 다른 주소값 
cout<<&q<<endl;
cout<<&copy<<endl; 

while(!q.empty()){
    cout<<q.front()<<" ";
    q.pop(); 
}

//인덱스 접근 X 

///XXX
for(int i:q){
    cout<<i<<" ";	
}
///XXX --> q.size() 가 계속 변해서 
for(int i = 0 ; i <q.size();i++){
    cout<<q[i]<<" ";
}


