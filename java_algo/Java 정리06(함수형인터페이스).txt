@FunctionalInterface
public interface Predicate<T>{
    boolean test(T t);
}



*Predicate<T>           
- boolean test(T t); --> list.removeIf(s->s.doubleValue()<0.0);
- IntPredicate (제네릭 X)
- boolean test(int t);
- DoublePredicate (제네릭 X)
- boolean test(double t);
- BiPredicate<T t, U u>(제네릭O)
- boolean test(T t, U u)

*Supplier<T>
- T get();

- IntSupplier (제네릭 X)
- getAsInt();

*Consumer<T>
- void accept(T t);
- IntConsumver
- void accept(int value)
- ObjIntConsumer<T> 
- void accept(T t, int value);
- ObjDoubleConsumer<T> 
- void accept(T t, double value);
- BiConsumber<T,U> 
- void accept(T t,U u);


*Function<T,R>
- R apply(T t);
- IntToDoubleFunction 
- double applyAsDouble(int value);
- DoubleToIntFunction
- int applyAsInt(double v);
.... 뭐 많음... 당장 굳이....



*static 메소드 참조
//이미 정의 되어 잇는 메소드를 사용할때.... 가능..... 
Consumer<List<Integer>> c = s -> Collections.reverse(s);
Consumer<List<Integer>> c = Collections::reverse;




*참조변수를 통한 인스턴스 메소드 참조 
class JustSort {
    public void sort(List<?> lst) {    // 인스턴스 메소드
        Collections.reverse(lst);
    }
}

class ArrangeList3 {
    public static void main(String[] args) {
        List<Integer> ls = Arrays.asList(1, 3, 5, 7, 9);
        ls = new ArrayList<>(ls);
        JustSort js = new JustSort();

        Consumer<List<Integer>> c = e -> js.sort(e);
        c.accept(ls);
        // 작동됨. 
        //final로 정의되거나, effectively final(재정의 X)
        //만약 js = new JustSort(); 추가하면 작동 X 
        //위 추가 예시가 아니더라도, js=null을 추후에 해줘도 문제ㅡ
        // 그냥 안건드려야 가능
        //심지어, 
        // 람다식을
        // Consumer<List<Integer>> c = js::sort; 이렇게 바꿔도 가능 

        System.out.println(ls);
    }
}


**example
List<String> ls = Arrays.asList("toy","robot");
ls.forEach(System.out::print);가능
// Collection<E>가 Iterable<E>를 상속하고,
// Iterable 에는, default void forEach(Consumer<? super T> action){
    for(T t : this){action.aceept(t);}
}
//가 존재한다. action 생성시에 필요한 걸 전달하면 되는데 그게 딱 System.out::print 적합




**example
class IBox {
    private int n;
    public IBox(int i) { n = i; }
    public int larger(IBox b) {
        if(n > b.n)   return n;
        else return b.n;
    }
}
class NoObjectMethodRef {
    public static void main(String[] args) {
        IBox ib1 = new IBox(5);
        IBox ib2 = new IBox(7);

        // 두 상자에 저장된 값 비교하여 더 큰 값 반환
        ToIntBiFunction<IBox, IBox> bf = (b1, b2) -> b1.larger(b2);
        //ToIntBiFunction<IBox, IBox> bf = IBox::larger; OK //Static메소드가 아님에 유의 
        //ToIntBiFunction<IBox, IBox> bf = b1::larger; XXXX 
        int bigNum = bf.applyAsInt(ib1, ib2);
        System.out.println(bigNum);}
}




**exampleclass StringMaker {
public static void main(String[] args) {
    Function<char [],String> sm = String::new;
//  Function<char[], String>sm= s-> new String(s);
    char[] src = {'R', 'o', 'b', 'o', 't'};
    System.out.println(sm.apply(src));
}
}


*클래스 이름을 통한 인스턴스 메소드 참조

*생성자 참조ㅓ 