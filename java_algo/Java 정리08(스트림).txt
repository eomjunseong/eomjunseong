*중간연산/최종연산
-Instream filter(IntPredicate predicate) //bool test

IntStream stm1 = Arrays.stream(arr);
IntStream stm2 = stm1.filter(n->n%2==1);//중간 연산
int sum = stm2.sum();//최종연산

1)생성방법
- 배열 및 켈렉션 인스턴스 대상으로 스트림 생성 
2)중간 연산의 종류와 내용
- 필터링 및 맵핑 관련연산
3)최종 연산의 종류와 내용
- 리덕션 관련 연산

1)생성방법
    - public static <T> Stream<T> stream(T[] array); //Arrays 클래스에 정의 
    - public static <T> Stream<T> stream(T[] array, int start, int end); //s~e-1; 
    - public static Instream stream(int[] array); //따로존재~ 

    *배열로 스트림 생성 
    - Stream<String> s = Arrays.stream(names); (생성)

    *컬렉션으로 스트림 생성 -->Collection인터안에 디폴트메소드로 정의되어있음 
    - List<string> list=.....  //// list.stream() (생성)

    +int[] ??
    int[] ar = {1,2,3};
    IntStream s = Arrays.stream(ar); OO //아래와 비교하기
    Stream<Integer> ss = Arrays.stream(ar); XX//위와 비교 해보기
    Instream s = Arrays.stream(1,2,3)   XXXX //가변인자 안되네! 아하! 
    IntStream s = Arrays.stream(new int[]{1,2,3})OO 

    *of // 컬렉션은 하나로 처리해 버리네 ; 
    static <T> Stream<t> of(T t)  
    static <T> Stream<T> of(T...values)
    Stream<Integer> integerStream = Stream.of(1, 2, 3, 4); // OO --> IntStream?? XX
    String[] ss = new String[]{"aa","bb","cc"};
    Stream<String> ss1 = Stream.of(ss); --> count = 3 
    List<String> list = new ArrayList<>();
    list.add("aa1");
    list.add("aa2");
    list.add("aa3");
    Stream.of(list)--> Stream<List<String>> + count = 1  

        
    


    *아하!
    interface Iterable<T>에
    default void forEach(Consumer<? super T>action){
        for(T t : this) action.accept(t);
    }있음 //Collection<E>가 이를 상속 -> 그래서 list.forEach() ㅇㅇ
    but
    Stream 클래스안에 똑같은 forEach가 존재 ㅇㅇ // 최종연산에서 이것을 쓰는것임
    --> Stream 안에 forEach OO
    --> Collection 안에, Iterable 안에 forEach OO

2)컬렉션/배열 공통 기능
    -1) filter 필터링
        Stream<T> filter(Predicate<? super T> predicate)  //Stream<T>안에존재
        --------------------------------------boolean test(T t)

    -2) map 맵핑 
    : "새로운 Stream"을 형성하는 연산
        //ex) aaa bbbb ccccc -> 3 4 5 
        //Stream<T>에존재, Optional과 다름 
        <R> Stream<R> map(Function<? super T, ? extends R> mapper) 
        --------------------------------------R apply(T t)---------
        //오토 언/박싱이 진행 되기 때문에, 기본형도 제공 
        ex) IntStream mapToInt(ToIntFunction<? super T> mapper)
        --------------------------------------int apply(T t)-------


3)리덕션과 reduce 메소드 (최종연산임)
    * reduce // 반환형이 T임 -> Stream<String> 이면 String 반환 하는거임 하나겠지? OO
    - T reduce(T identity, BinaryOperartor<T> accumlator) //Stream<T>에 존재
    ------------------------- T apply(T t1,T t2)--------------------
    public static void main(String[] args) {
        List<String> ls = Arrays.asList("Box","Simple","Complex","Robot");

        BinaryOperator<String> lc = (s1,s2)->{
           return s1.length()>s2.length()?s1:s2;
        } ; --> T apply(T t1, T t2); 

        String str = ls.stream().reduce("",lc); 
        //reduce의 첫번째 인자의 의미는?
        //1) stream 이 비었을때 반환
        //2) stream이 안비어있으면 "" 내용 포함해서 연산-> BinaryOperartor<T> accumlator : T apply(T t1,T t2)
        System.out.println(str);
    }

    *parallelStream 
    //병렬 처리 
    // 연산의 단계를 줄이는게 핵심....(연산의 횟수를 줄이는게 핵심이 아니라...)-> 라고 하는데 흠....




&&&&&!!! 상태 저장!!!!&&&&&&&&&&&
*.collect(Collectors.toList()); // 최종적으로 리스트의 형태로 만듬.
- List<String> collect = list.stream().collect(Collectors.toList());
*A[] result = list.stream().toArray(A[]::new); 


*.count(); //갯수 리턴

public static void main(String[] args) throws Exception {
    List<String> list = Arrays.asList("Java", "Scala", "Groovy", "Python", "Go", "Swift");
    list.stream()
            .sorted()
            .forEach(n -> System.out.println(n));
    System.out.println();
    list.stream()
            .sorted(Comparator.reverseOrder())
            .forEach(n -> System.out.println(n));
}

@map vs flatMap
map() 는 내부 객체의 변환에만 사용이 되지만 flatMap() 은 변환과 Flatten(펼침)이 함께 사용됩니다.
flatMap() = map() + Flattening

*map
String[] animal = new String[]{"cat","dog"};
Stream<String> result = Arrays.stream(animal);
Stream<String[]> an1 = result.map(s->s.split(""));
        //아래 가능
        Stream<Integer>  an2 = result.map(s->s.length());
        
List<String[]> ans  = a1.collect(Collectors.toList());
-> {String[],String[]};
-> {["c","a","t'],["d","o","g']};
        

*flatMap
List<List<String>> CC = new ArrayList<>();
CC.add(Arrays.asList("a", "aa", "aaa"));
CC.add(Arrays.asList("b", "bb", "bbb"));
CC.add(Arrays.asList("c", "cc", "ccc"));
Stream<List<String>> a =  CC.stream();
//가능 Stream<Stream<String> > a2 = a.map(s->s.stream());
//가능 Stream<String> a2 = a.flatMap(s->s.stream());


IntBinaryOperator lc = (a, b)->{
    return a>b?a:b;
};
BinaryOperator<String> lc = (s1,s2)->{
    return s1.length()>s2.length()?s1:s2;
} ; --> T apply(T t1, T t2);


*sorted() --> Comparable<T> compareTo를 구현하고 있어야함 
- Stream<T> sorted(Comparator<? super T> comparator )
- Comparator -> int compare(a,b); 
--> sorted((a,b)->a.length()-b.length())...