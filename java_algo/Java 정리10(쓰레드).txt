*쓰레드(보통 CPU 코어 하나에, 스레드 하나 할당되어 동시에 실행)

*생성(2가지 방법)
    방법1.
        1. Ruunable을 구현한 인스턴스 생성
            Ruunable task = ()->{//run 재정의};// 함수형 인터페이스

        2. Thread 인스턴스 생성
            Thread t = new Thread(tak);        //new Thread(tak,"이름"); 

        3. start 호출
            t.start();//쓰레드의 생성및 실행 

    방법2.
        1.Thread를 상속하는 클래스의 정의와 인스턴스 생성
                class Task extends Thread {
                    public void run() {
                        int n1 = 10;
                        int n2 = 20;
                        String name = Thread.currentThread().getName();
                        System.out.println(name + ": " + (n1 + n2));
                    }
                }
        2. start //start 해야 생성임+ start로 run 실행 
                Task t1 = new Task();
                t1.start();

Thread.sleep(100);//0.1초 잠 //try catch 해줘야함 -InteruptedException //run()메소드 안에서 쓰는 느낌
t.join()     특정 쓰레드의 실행이 완료되기를 기다릴때 호출 


*동기화
    방법1.
    1.동기화 메소드
        //사용하기 편하지만 메소드 전체에 동기화를 걸어야 하는 단점. 

        //한 클래스의 두 메소드에, 동기화메소드 선언이 되면,
        //두 메소드는 둘 이상의 쓰레드에 의해 동시에 실행 될 수 없도록 동기화 된다. 
        //한 쓰레드가 increment 메소드를 실행 중이면, 다른 쓰레드는 decrement메소드를 할 수 없음
            *synchronized 추가
            synchronized public void increment(){
                count++; 
            }
            synchronized public void decrement(){
                count--; 
            }
    2.동기화 실행 블록
        *this를 사용 
        "이 인스턴스의 다른 동기화 블록과 더불어 동기화 하겠다" 
        "동기화 블록은 둘 이상의 쓰레드의 의해 동시에 실행 될 수 없도록 함께 동기화된다."
            public void increment() {
                synchronized(this) {
                    count++;
                }
            }
            public void decrement() {
                synchronized(this) {
                    count--;
                }
            }


*쓰레드풀
- 필요시, 쓰레드를 생성하는 과정에는 리소스 소모가 큼
- 그래서 미리 만들어둠
- 이를 직접 구현하기는 어려움
- concurrent 패키지를 활용하면 쉬움
    import java.util.concurrent.Executors;
    import java.util.concurrent.ExecutorService;
    ExecutorService exr = Executors.newSingleThreadExecutor(); //쓰레드풀 생성
    exr.submit(task);    // 쓰레드 풀에 작업을 전달
    exr.shutdown();    // 쓰레드 풀과 그 안에 있는 쓰레드의 소멸

    *newSingleThreadExecutor : 하나의 쓰레드만 존재(하나의 코어를 기준으로 코어의 활요도를 매우 높인 풀)
    *newFixedThreadPool(num) : num만큼 쓰레드 생성 유지X
    *newCachedThreadPool     : 작업의 수에 맞게 유동적으로 관리

    *shoutdown : 호출되면 더이상의 추가 작업을 받지는 않고, 실행 중인것은 다 실행후 풀 종료.


*쓰레드에서 값반환 받기
    Callable+,Future(결과 반환을 위해, Runnable의 run은 void라)
    //Callable와 Future의 타입인자가 동일해야함

    @FunctionalInterface
    public interface Callable<V>{
        V call() throws Exception{};
    }
    

        Callable<Integer> task = () -> {
            int sum = 0;
            for(int i = 0; i < 10; i++)
                sum += i;
            return sum;
        };
        ExecutorService exr = Executors.newSingleThreadExecutor(); //스레드풀 생성 
        Future<Integer> fur = exr.submit(task);//작업 전달 + 반환 
        Integer r = fur.get();

*동기화 실행 블록 대신 쓸 수 있는, ReentranLock
class Counter {
    int count = 0;
    ReentrantLock criticObj = new ReentrantLock();
    public void increment() {
        criticObj.lock();

        try {
            count++;
        } finally {
            criticObj.unlock();
        }
    }
    public void decrement() {
        criticObj.lock();

        try {
            count--;
        } finally {
            criticObj.unlock();
        }
    }
    public int getCount() { return count; }
}
class MutualAccessReentrantLock {
    public static Counter cnt = new Counter();

    public static void main(String[] args) throws InterruptedException {
        Runnable task1 = () -> {
            for(int i = 0; i < 1000; i++)
                cnt.increment();
        };

        Runnable task2 = () -> {
            for(int i = 0; i < 1000; i++)
                cnt.decrement();
        };

        ExecutorService exr = Executors.newFixedThreadPool(2);
        exr.submit(task1);
        exr.submit(task2);

        exr.shutdown();
        exr.awaitTermination(100, TimeUnit.SECONDS); // 쓰레드풀에 전달된 작업이 끝나기를 100초간 기다린다. 

        System.out.println(cnt.getCount());
    }
}


*백터를 제외한 Collection 프레임워크들은, 성능을 위해 동기화 되어있지 않음.
List<Integer> lst = Collections.synchronizedList(new ArrayList<Integer>());
//이런식의 동기화가 필요하고, 
    Runnable task = () -> {
            //컬렐션인스턴스는 동기화 되어있으나, 이를 기반으로 생성된 반복자까지는 동기화 X로
            synchronized(lst) { //이런식으로 동기화 블록을 지정해줘야함
                ListIterator<Integer> itr = lst.listIterator();

                while(itr.hasNext())
                    itr.set(itr.next() + 1);
            }
        };